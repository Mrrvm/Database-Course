5. I)

delimiter $$
CREATE
	FUNCTION is_diff_doctor(study_r_number int)
	RETURNS int
	BEGIN
		declare ret_id int;
		SELECT doctor_id into ret_id
		FROM Request 
		WHERE Request.r_number = study_r_number;
		RETURN ret_id;
	END$$
delimiter;


delimiter $$
CREATE 
	TRIGGER check_doctor BEFORE INSERT 
	ON Study
	FOR EACH ROW BEGIN
		IF is_diff_doctor(NEW.request_number) = NEW.doctor_id THEN
			CALL raise_error();
		END IF;
    END$$
delimiter;


5. II)

delimiter $$
CREATE
	FUNCTION is_dates_ok(new_start date, new_end date, device_snum varchar(255), device_manuf varchar(255))
	RETURNS int
	BEGIN
		DECLARE ret_value int default 1;
		DECLARE done int default 0;
		DECLARE my_cursor cursor for select * from Wears;
		DECLARE continue handler for not found set done = 1;
		DECLARE daystill_end_to_curr;
		DECLARE daystill_start_to_curr;
		OPEN my_cursor;
		my_loop: loop
			FETCH my_cursor INTO snum, manuf, p_start, p_end;
			IF done THEN LEAVE my_loop; END IF;
			IF snum = device_snum THEN
				IF manuf = device_manuf THEN
					daystill_end_to_curr = datediff(p_end, current_date);
					IF daystill_end_to_curr < datediff(new_start, current_date) THEN
						ret_value = 0;
					END IF;
					daystill_start_to_curr(p_start, current_date);
					IF daystill_start_to_curr > datediff(new_end, current_date) THEN
						ret_value = 0;
				END IF;
			END IF;
			RETURN ret_value;
		END loop;
		CLOSE my_cursor;
	END$$
delimiter;

delimiter $$
CREATE 
	TRIGGER prevent_overlap BEFORE INSERT 
	ON Wears
	FOR EACH ROW BEGIN
		IF is_dates_ok(NEW.p_start date, NEW.p_end date, NEW.snum varchar(255), NEW.manuf varchar(255)) = 0 THEN
			signal sqlstate '45000' set message_text = 'Overlapping periods';
    END$$
delimiter;


6)

delimiter $$
CREATE
	FUNCTION region_overlaps_element(series_idA int, indexA int, x1B int, y1B int, x2B int, y2B int)
	RETURNS int
	BEGIN
		TODO
	END$$
delimiter;